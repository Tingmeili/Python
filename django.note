Django 1.7.1及以上 用以下命令
# 1. 创建更改的文件
python manage.py makemigrations
# 2. 将生成的py文件应用到数据库
python manage.py migrate

python manage.py runserver 8001



相关的学习文档：https://code.ziqiangxuetang.com/django/django-basic.html





RUN:
python manage.py runserver localhost:9000




Django Shell:
    现在我们进入Django中的交互式shell来进行数据库的增删改查等操作
    


创建超级用户:
     python manage.py createsuperuser



1.网页程序的逻辑:
    request进来->从服务器获取数据->处理数据->把网页呈现出来

    url设置相当于客户端向服务器发出request请求的入口, 并用来指明要调用的程序逻辑
    views用来处理程序逻辑, 然后呈现到template(一般为GET方法, POST方法略有不同)
    template一般为html+CSS的形式, 主要是呈现给用户的表现形式


   
    1.1：url()函数有四个参数, 两个是必须的:regex和view, 两个可选的:kwargs和name：
              regex是regular expression的简写,这是字符串中的模式匹配的一种语法, Django 将请求的URL从上至下依次匹配列表中的正则表达式，直到匹配到一个为止。
              view当 Django匹配了一个正则表达式就会调用指定的view逻辑, 上面代码中会调用article/views.py中的home函数

              kwargs任意关键字参数可传一个字典至目标view
              name命名你的 URL, 使url在 Django 的其他地方使用, 特别是在模板中（name 可以用于在 templates, models, views ……中得到对应的网址，相当于“给网址取了个名字”，只要这个名字不变，网址变了也能通过名字获取到。）
  
    1.2 ：改变网址：<a href="{% url 'add2' 4 5 %}">link</a>   
              注意看重点 add 变成了 new_add，但是后面的 name='add2' 没改，这时 {% url 'add2' 4 5 %} 就会渲染对应的网址成 /new_add/4/5/



            另外，比如用户收藏夹中收藏的URL是旧的，如何让以前的 /add/3/4/自动跳转到现在新的网址呢？

            要知道Django不会帮你做这个，这个需要自己来写一个跳转方法：

            具体思路是，在 views.py 写一个跳转的函数：
            from django.http import HttpResponseRedirect
            from django.core.urlresolvers import reverse  # django 1.4.x - django 1.10.x
             
            def old_add2_redirect(request, a, b):
                return HttpResponseRedirect(
                 reverse('add2', args=(a, b))
            )

           urls.py中：
                 url(r'^add/(\d+)/(\d+)/$', calc_views.old_add2_redirect),
                 url(r'^new_add/(\d+)/(\d+)/$', calc_views.add2, name='add2'),

                 这样，假如用户收藏夹中有 /add/4/5/ ，访问时就会自动跳转到新的 /new_add/4/5/ 

2.Django 模板
     
     2.1 注意：模板一般放在app下的templates中，Django会自动去这个文件夹中找。但 假如我们每个app的templates中都有一个 index.html，当我们在views.py中使用的时候，直接写一个 render(request, 'index.html')，Django 能不能找到当前 app 的 templates 文件夹中的 index.html 文件夹呢?（答案是不一定能，有可能找错）
     
       Django 模板查找机制： Django 查找模板的过程是在每个 app 的 templates 文件夹中找（而不只是当前 app 中的代码只在当前的 app 的 templates 文件夹中找）。各个 app 的 templates 形成一个文件夹列表，Django 遍历这个列表，一个个文件夹进行查找，当在某一个文件夹找到的时候就停止，所有的都遍历完了还找不到指定的模板的时候就是 Template Not Found （过程类似于Python找包）。这样设计有利当然也有弊，有利是的地方是一个app可以用另一个app的模板文件，弊是有可能会找错了。所以我们使用的时候在 templates 中建立一个 app 同名的文件夹，这样就好了。

      这就需要把每个app中的 templates 文件夹中再建一个 app 的名称，仅和该app相关的模板放在 app/templates/app/ 目录下面：
            这样，使用的时候，模板就是 "app1/index.html" 和 "app2/index.html" 这样有app作为名称的一部分，就不会混淆。


  

    2.2 :Django模板中的循环，条件判断，常用的标签，过滤器的使用(简单总结一下：一般的变量之类的用 {{ }}（变量），功能类的，比如循环，条件判断是用 {%  %}（标签）)

         2.2.1:
              实例一，显示一个基本的字符串在网页上

                 views.py
                  # -*- coding: utf-8 -*-
                  from django.shortcuts import render
 
 
                  def home(request):
                        string = u"我在自强学堂学习Django，用它来建网站"
                        return render(request, 'home.html', {'string': string})


          2.2.2 : 实例二，讲解了基本的 for 循环 和 List内容的显示

                站点：{{info_dict.site}} 内容：{{ info_dict.content }}
                {% for key,value in info_dict.items %}
                   {{key}}:{{value}}
                {% endfor %}


          2.2.3 :实例四，在模板进行 条件判断和 for 循环的详细操作：
              forloop.counter	索引从 1 开始算
              forloop.counter0	索引从 0 开始算
              forloop.revcounter	索引从最大长度到 1
              forloop.revcounter0	索引从最大长度到 0
              forloop.first	当遍历的元素为第一项时为真
              forloop.last	当遍历的元素为最后一项时为真
              forloop.parentloop	

              用在嵌套的 for 循环中，

              获取上一层 for 循环的 forloop




               当列表中可能为空值时用 for  empty
               <ul>
                 {% for athlete in athlete_list %}
                 <li>{{ athlete.name }}</li>
                 {% empty %}
                 <li>抱歉，列表为空</li>
                {% endfor %}
              </ul>
          
         
          2.2.4: 实例五，模板上得到视图对应的网址：
               {% url 'add' 4 5 %}

               还可以使用 as 语句将内容取别名（相当于定义一个变量），多次使用（但视图名称到网址转换只进行了一次）
               {% url 'some-url-name' arg arg2 as the_url %}
 
                 <a href="{{ the_url }}">链接到：{{ the_url }}</a>
      
          2.2.5: 实例六，模板中的逻辑操作：
                1.   ==, !=, >=, <=, >, < 这些比较都可以在模板中使用，and, or, not, in, not in 也可以在模板中使用,假如我们判断 'ziqiangxuetang' 在不在一个列表变量 List 中：{% if 'ziqiangxuetang' in List %}



      2.3 模板中 获取当前网址，当前用户 等：
                配置：
                TEMPLATES = [
              {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                'context_processors': [
                ...
                'django.template.context_processors.request',
                ...
            ],
        },
    },
  ]





3.数据库?
    同步数据库
        python manage.py makemigrations
        python manage.py migrate
      

    3.1 数据库接口相关的接口（QuerySet API):
        

   
                  

4.后台？






5.表单的提交：
        注意：：网页的值传到服务器是通过 <input> 或 <textarea>标签中的 name 属性来传递的，在服务器端这么接收：

                 
        1.在model.py里面创建表
        2.在模板里面写写html，也就是用户的注册的入口
        2.在view.py里面引入model，并创建获取注册信息的函数
        



6.apache部署： 

        总结:

        部署时文件对应关系:

        sitename.conf --> wsgi.py --> settings.py --> urls.py --> views.py

        扩展

        明白了上面的关系, 一个 Django project 使用多个域名或让app使用子域名很简单,只要新建一个 wsgi.py 文件,更改里面对应的settings文件,新的settings文件可以对应新的urls.py,从而做到访问与原来不同的地址!









7.更新数据库出现错误：
    执行python manage.py migrate报错：
         django.db.utils.OperationalError: (1017, "Can't find file: './mysql/article_userinf.frm' (errno: 2)")


    解决办法： 
         首先要保证,目前的migration文件和数据库是同步的，通过执行：
                  python manage.py makemigrations
                  如果看到 这样的提示: No changes detected，则可以继续接下来的步骤

         进入到相应的app的migrations文件夹下面：
               删除除了__init__.py的其他的文件
         然后执行python manage.py makemigrations
         再执行 python manage.py migrate：
            （如果报：django.db.utils.OperationalError: (1050, "Table 'article_article' already exists"  ，则执行：python manage.py migrate appname --fake )
             
         

             


 





















              
 
 

   
     

  
     
